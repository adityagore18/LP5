%%writefile matrix_mul.cu
#include<iostream>
#include<cuda_runtime.h>
#include<cstdlib>

using namespace std;

__global__ void matMul(int *a,int *b,int *c,int n){
  int row = threadIdx.y;
  int col = threadIdx.x;
  int sum=0;

  for(int i=0;i<n;i++){
    sum+= a[row*n+i]*b[i*n+col];
  }

  c[row*n+col]=sum;
}


void fill(int *m,int n){
  for(int i=0;i<n*n;i++){
    m[i]=rand()%10;
  }
}

void print(const int *m,int n ){
  for(int i=0;i<n*n;i++){

    cout<<m[i]<<" ";
    if((i+1)%n==0) cout<<"\n";
  }
  cout<<"\n";
}


int main(){
  const int n=2;
  const int bytes = n*n*sizeof(int);

  int A[n*n],B[n*n],C[n*n];

  int *dA,*dB,*dC;

  fill(A,n);
  fill(B,n);

  cout<<"A:\n";
  print(A,n);

  cout<<"B:\n";
  print(B,n);

  cudaMalloc(&dA,bytes);
  cudaMalloc(&dB,bytes);
  cudaMalloc(&dC,bytes);

  cudaMemcpy(dA,A,bytes,cudaMemcpyHostToDevice);
  cudaMemcpy(dB,B,bytes,cudaMemcpyHostToDevice);

  dim3 threadsPerBlock(n,n);

  matMul<<< 1 , threadsPerBlock >>>(dA,dB,dC,n);

  cudaMemcpy(C,dC,bytes,cudaMemcpyDeviceToHost);

  cout<<"C:\n";
  print(C,n);

  cudaFree(dA);
  cudaFree(dB);
  cudaFree(dC);

  return 0;
}


#command to execute
!nvcc -arch=sm_75 matrix_mul.cu -o matrix_mul
#show output
!./matrix_mul