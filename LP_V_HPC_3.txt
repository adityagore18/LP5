%%writefile main.cpp
#include<iostream>
#include<omp.h>

using namespace std;
void buubleSort(int arr[],int n){
    for(int i=0;i<n;i++){
      for(int j=0;j<n-1;j++){
        if(arr[j]>arr[j+1]){
          int temp=arr[j];
          arr[j]=arr[j+1];
          arr[j+1]=temp;
        }
      }
    }
}

void parrallelBubbleSort(int arr[],int n){
     for(int i=0;i<n;i++){
        #pragma omp parallel
        {
          #pragma omp for
          for(int j=1;j<n-1;j+=2){
            if(arr[j]>arr[j+1]){
              swap(arr[j],arr[j+1]);
            }
          }

          #pragma omp barrier

          #pragma omp for
          for(int j=0;j<n-1;j+=2){
            if(arr[j]>arr[j+1]){
              swap(arr[j],arr[j+1]);
            }
          }
        }
     }
}





void display(int arr[],int n){
  for(int i=0;i<n;i++){
    cout<<arr[i]<<" ";
  }
  cout<<endl;
}




int main(){
   int arr[]={3,4,1,5,2,16,8,9};
   int n=8;
   int arr2[]={3,4,1,5,2,16,8,9};
   int n2=8;

   double start_time, end_time;
   display(arr,n);

   start_time = omp_get_wtime();
   parrallelBubbleSort(arr,n);
   end_time = omp_get_wtime();
   cout << "Time taken in parallel algorithm: " << end_time - start_time << " seconds" << endl;
   display(arr,n);

   start_time=omp_get_wtime();
   buubleSort(arr2,n2);
   end_time=omp_get_wtime();
   cout << "Time taken in serial algorithm: " << end_time - start_time << " seconds" << endl;


   display(arr2,n2);
   return 0;

}


!g++ -fopenmp main.cpp
!./a.out